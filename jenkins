throttle(['Lock']) {
    node {
        def remote = [:]
            
        if (fileExists('/var/jenkins_home/version.txt')) {
            def readcounter =    readFile(file: 'version.txt')
            readcounter = readcounter.toInteger() +1
            def version = "2." + readcounter
                
            withCredentials([file(credentialsId: 'keyssh', variable: 'vm16')]){
                remote.identityFile = vm16
                remote.name = 'CI'
                remote.host = '20.120.10.138'
                remote.user = 'azureuser'
                remote.allowAnyHosts = true
                    
                stage ('Cleanup') {
                    writeFile file: 'cleanup.sh', text:
                    "sudo rm -rf dockerfile\ndocker stop customJenkins || true && docker rm customJenkins || true"
                    sshScript remote: remote, script: "cleanup.sh"
                }
                    
                stage ('Scm Checkout') {
                    git branch: 'jenkins', url: 'https://github.com/Nazar802/dockerfile.git'
                    sshCommand remote: remote, command: 'git clone --branch jenkins https://github.com/Nazar802/dockerfile.git'
                }
                    
                stage ('Docker Build') {
                    writeFile file: 'build.sh', text: 
                    "cd dockerfile\ndocker build . -t commonregistry646.azurecr.io/jenkins:${version}"
                    sshScript remote: remote, script: "build.sh"
                }
                    
                stage ('Docker Run') {
                    writeFile file: 'run.sh', text: 
                    "cd dockerfile\ndocker run --rm -p 8181:8080 -p 51000:50000 -d --name customJenkins --env JENKINS_ADMIN_ID=$JENKINS_ADMIN_ID --env JENKINS_ADMIN_PASSWORD=$JENKINS_ADMIN_PASSWORD --env JENKINS_RESERVE_URL=${JENKINS_RESERVE_URL} commonregistry646.azurecr.io/jenkins:${version}"
                    sshScript remote: remote, script: "run.sh"
                }
                    
                stage ('Docker Push') {
                    writeFile file: 'push.sh', text:
                    "cd dockerfile\ndocker login commonregistry646.azurecr.io -uCommonRegistry646 -p${CommonPass}\ndocker push commonregistry646.azurecr.io/jenkins:${version}"
                    sshScript remote: remote, script: "push.sh"
                }
            }
                
            println(version)
            writeFile(file: 'version.txt',    text:readcounter.toString())
            
        }
        else {
            currentBuild.result = "FAILURE" 
        }
    }
}
