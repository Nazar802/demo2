<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.42">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/Nazar802/dockerfile.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2633.v6baeedc13805">
    <script>node {
    def remote = [:]
    
    withCredentials([file(credentialsId: &apos;keyssh&apos;, variable: &apos;vm16&apos;)]){
        remote.identityFile = vm16
        remote.name = &apos;monitoring&apos;
        remote.host = &apos;20.120.10.138&apos;
        remote.user = &apos;azureuser&apos;
        remote.allowAnyHosts = true
        
        stage (&apos;Cleanup 16&apos;) {
            sh &quot;readlink -f ${vm16}&quot;
            writeFile file: &apos;cleanup.sh&apos;, text:
            &quot;sudo rm -rf dockerfile\ndocker stop node_exporter || true &amp;&amp; docker rm node_exporter || true\ndocker stop cadvisor || true &amp;&amp; docker rm cadvisor || true\ndocker stop grafana || true &amp;&amp; docker rm grafana || true\ndocker stop prometheus || true &amp;&amp; docker rm prometheus || true&quot;
            sshScript remote: remote, script: &quot;cleanup.sh&quot;
        }
        
        stage (&apos;Scm Checkout 16&apos;) {
            git branch: &apos;monitoring&apos;, url: &apos;https://github.com/Nazar802/dockerfile.git&apos;
            sshCommand remote: remote, command: &apos;git clone --branch monitoring https://github.com/Nazar802/dockerfile.git&apos;
        }
        
        stage (&apos;Docker-Compose Up 16&apos;) {
            writeFile file: &apos;start.sh&apos;, text: 
            &quot;cd dockerfile\ndocker-compose up -d&quot;
            sshScript remote: remote, script: &quot;start.sh&quot;
        }
        
        /*stage (&apos;Dokcer Push&apos;) {
            writeFile file: &apos;push.sh&apos;, text:
            &quot;cd dockerfile\ndocker login commonregistry646.azurecr.io -uCommonRegistry646 -p${CommonPass}\ndocker-compose push&quot;
        }*/
    }
    
    withCredentials([file(credentialsId: &apos;vm8&apos;, variable: &apos;v8key&apos;)]) {
        remote.identityFile = v8key
        remote.name = &apos;front&apos;
        remote.host = &apos;20.124.183.101&apos;
        remote.user = &apos;azureuser&apos;
        remote.allowAnyHosts = true
        
        stage (&apos;Cleanup 8&apos;) {
            writeFile file: &apos;cleanup.sh&apos;, text:
            &quot;sudo rm -rf dockerfile\ndocker stop node_exporter || true &amp;&amp; docker rm node_exporter || true\ndocker stop cadvisor || true &amp;&amp; docker rm cadvisor || true&quot;
            sshScript remote: remote, script: &quot;cleanup.sh&quot;
        }
        
        stage (&apos;Git Clone 8&apos;) {
            sshCommand remote: remote, command: &apos;git clone --branch monitoring https://github.com/Nazar802/dockerfile.git&apos;
        }
        
        stage (&apos;Docker-Compose up 8&apos;) {
            writeFile file: &apos;start.sh&apos;, text:
            &quot;cd dockerfile/monitoring8\ndocker-compose up -d&quot;
            sshScript remote: remote, script: &quot;start.sh&quot;
        }
    }
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>