<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.42">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/Nazar802/dockerfile.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2633.v6baeedc13805">
    <script>node {
    def remote = [:]
        
    if (fileExists(&apos;/var/jenkins_home/version.txt&apos;)) {
        def readcounter =    readFile(file: &apos;version.txt&apos;)
        readcounter = readcounter.toInteger() +1
        def version = &quot;2.&quot; + readcounter
            
        withCredentials([file(credentialsId: &apos;keyssh&apos;, variable: &apos;vm16&apos;)]){
            remote.identityFile = vm16
            remote.name = &apos;CI&apos;
            remote.host = &apos;20.120.10.138&apos;
            remote.user = &apos;azureuser&apos;
            remote.allowAnyHosts = true
                
            stage (&apos;Cleanup&apos;) {
                writeFile file: &apos;cleanup.sh&apos;, text:
                &quot;sudo rm -rf dockerfile\ndocker stop customJenkins || true &amp;&amp; docker rm customJenkins || true&quot;
                sshScript remote: remote, script: &quot;cleanup.sh&quot;
            }
                
            stage (&apos;Scm Checkout&apos;) {
                git branch: &apos;jenkins&apos;, url: &apos;https://github.com/Nazar802/dockerfile.git&apos;
                sshCommand remote: remote, command: &apos;git clone --branch jenkins https://github.com/Nazar802/dockerfile.git&apos;
            }
                
            stage (&apos;Docker Build&apos;) {
                writeFile file: &apos;build.sh&apos;, text: 
                &quot;cd dockerfile\ndocker build . -t commonregistry646.azurecr.io/jenkins:${version}&quot;
                sshScript remote: remote, script: &quot;build.sh&quot;
            }
                
            stage (&apos;Docker Run&apos;) {
                writeFile file: &apos;run.sh&apos;, text: 
                &quot;cd dockerfile\ndocker run --rm -p 8181:8080 -p 51000:50000 -d --name customJenkins --env JENKINS_ADMIN_ID=${JENKINS_ADMIN_ID} --env JENKINS_ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD} commonregistry646.azurecr.io/jenkins:${version}&quot;
                sshScript remote: remote, script: &quot;run.sh&quot;
            }
                
            stage (&apos;Dokcer Push&apos;) {
                writeFile file: &apos;push.sh&apos;, text:
                &quot;cd dockerfile\ndocker login commonregistry646.azurecr.io -uCommonRegistry646 -p${CommonPass}\ndocker push commonregistry646.azurecr.io/jenkins:${version}&quot;
                sshScript remote: remote, script: &quot;push.sh&quot;
            }
        }
            
        println(version)
        writeFile(file: &apos;version.txt&apos;,    text:readcounter.toString())
        
        
    }
    else {
        currentBuild.result = &quot;FAILURE&quot; 
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>